# REQUIREMENT: Serial console (UART) must be enabled on the GPIO. 
import RPi.GPIO as GPIO
import threading
import time
import subprocess

LINEPWR_PIN_IN = 4   # LINEPWR (5v wall power) sensing
# PWR_EN_PIN_OUT = 14  # PowerBoost Enable -- Using UART Signal

# PowerBoost 1000c ENABLE pin is tied to OR logic using a P-Channel JFET.
# There are two inputs, "External Line Power" and "RPi Running". 
# If external power is removed, the PowerBoost continues supplying power
# from battery until the "RPi Running" signal is lost. When both inputs are
# lost (or low) the PowerBoost 1000c stops power output.
#
# The "RPi Running" signal is generated by the system serial (UART) console.
# UART uses the TX pin 14 (PWR_EN_PIN_OUT), which regularly transmits until
# the system is completely shutdown (including unmounting the filesystem). 
# After the system is shutdown, the TX becomes silet. The output of the UART TX 
# is sent to a buffer / logic level converter chip, stabilizing the signal and
# boosting it from 3.3v to 5v. 
#
# This service monitors for the loss of external power on LINEPWR_PIN_IN.
# If the value becomes low, external power is loss and we initiate a clean
# shutdown of the system. 




class ShutdownService(object):
    def __init__(self):
        GPIO.setmode(GPIO.BCM) # Broadcom pin-numbering scheme

        # Configure external power sensing pin
        GPIO.setup(LINEPWR_PIN_IN, GPIO.IN, pull_up_down=GPIO.PUD_DOWN)

        self.running = True
        self.wait_time = 10
        self.shutdown_timer = None

    def monitor_external_power(self):
        print("ShutdownService: External Power Monitor Started")
        try:
            while self.running:
                power_detected = GPIO.input(LINEPWR_PIN_IN)
                if not power_detected and not self.shutdown_timer:
                    self._start_shutdown_timer()
                if power_detected and self.shutdown_timer:
                    self._cancel_shutdown_timer()
                time.sleep(0.5)
        except KeyboardInterrupt:
            print("ShutdownService: External Power Monitor Ended due to kill signal")
            self.running = False
        self.stop_service()

    def _start_shutdown_timer(self):
        if not self.shutdown_timer:
            print("ShutdownService: Power Loss Detected. Starting countdown")
            self.shutdown_timer = threading.Timer(self.wait_time, self._shutdown_timer_callback)
            self.shutdown_timer.start()

    def _cancel_shutdown_timer(self):
        if self.shutdown_timer:
            print("ShutdownService: Power Detected. Cancelling countdown")
            self.shutdown_timer.cancel()
            self.shutdown_timer = None

    def _shutdown_timer_callback(self):
        print("ShutdownService: Shutting Down System")
        subprocess.call(["shutdown", "-h", "now"])

    def stop_service(self):
        if self.shutdown_timer:
            print("ShutdownService: Cancelling timer")
            self.shutdown_timer.cancel()
        print("ShutdownService: Cleaning up GPIO")
        GPIO.cleanup()


def main():
    shutdown_service = ShutdownService()
    shutdown_service.monitor_external_power()

if __name__ == "__main__":
    main()

